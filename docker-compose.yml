version: "3.8" # Use an appropriate version

services:
  app:
    container_name: nestjs_app
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000

      # === PostgreSQL Config ===
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: myuser_compose
      POSTGRES_PASSWORD: mypassword_compose
      POSTGRES_DB: mydatabase_compose

      MONGO_REPLICA_URI_NODES: "mongo1:27017,mongo2:27017,mongo3:27017"
      MONGO_REPLICA_SET_NAME: "rs0" # Must match _id in mongo-init.sh and --replSet arg
      # MONGO_DB_NAME: ${MONGO_DB_NAME:-mymongodb}

      # MONGO_USER: ${MONGO_USER:-root} # App user for Mongo (might differ from root)
      # MONGO_PASS: ${MONGO_PASS:-password} # App user password
      # MONGO_AUTH_SOURCE: ${MONGO_AUTH_SOURCE:-admin} # DB to auth against

    depends_on:
      mongo1:
        condition: service_started
      mongo2:
        condition: service_started
      mongo3:
        condition: service_started
      # mongo-init:
      #   condition: service_completed_successfully

    volumes:
      - ./server:/usr/src/app
    networks:
      - app_network

  # PostgreSQL Service
  postgres_db:
    container_name: postgres_db
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: myuser_compose
      POSTGRES_PASSWORD: mypassword_compose
      POSTGRES_DB: mydatabase_compose
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  # === MongoDB Replica Set Nodes ===
  mongo1:
    image: mongo:6
    container_name: mongo1
    command: mongod --replSet rs0 --bind_ip_all
    # ports:
    #   - "27017:27017"
    volumes:
      - mongo1_data:/data/db
    # environment:
    # MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-root}
    # MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS:-password}
    networks:
      - app_network
    healthcheck: # Basic healthcheck
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  mongo2:
    image: mongo:6
    container_name: mongo2
    command: mongod --replSet rs0 --bind_ip_all
    # ports:
    #   - "27018:27017"
    volumes:
      - mongo2_data:/data/db
    # environment:
    # MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-root}
    # MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS:-password}
    networks:
      - app_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  mongo3:
    image: mongo:6
    container_name: mongo3
    command: mongod --replSet rs0 --bind_ip_all
    # ports:
    #   - "27019:27017"
    volumes:
      - mongo3_data:/data/db
    # environment:
    # MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-root}
    # MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS:-password}
    networks:
      - app_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # === MongoDB Initializer Service ===
  mongo-init:
    image: mongo:6
    container_name: mongo-init-replica
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    volumes:
      - ./devops/mongo/mongo-init.sh:/scripts/mongo-init.sh
    entrypoint: ["/bin/bash", "/scripts/mongo-init.sh"]
    networks:
      - app_network

  # === Monitoring Services ===
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    volumes:
      - ./devops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - app_network
    depends_on:
      - app

  grafana:
    image: grafana/grafana:9.5.3
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./devops/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      # GF_SECURITY_ADMIN_PASSWORD: your_secure_password
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - app_network
    depends_on:
      - prometheus

# Volumes for persistent data storage
volumes:
  postgres_data: {}
  mongo1_data: {}
  mongo2_data: {}
  mongo3_data: {}
  prometheus_data: {}
  grafana_data: {}

# Network for inter-container communication
networks:
  app_network:
    driver: bridge
